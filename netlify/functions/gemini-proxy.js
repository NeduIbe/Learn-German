// This file will run securely on Netlify's server infrastructure.
// It hides the API key from the public frontend.

// Get the API key securely from Netlify's environment variables.
// NOTE: You must set an environment variable named 'GEMINI_API_KEY' in your Netlify settings.
const API_KEY = process.env.GEMINI_API_KEY;
const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=${API_KEY}`;

// The main handler function required for Netlify Serverless Functions
exports.handler = async (event, context) => {
    // 1. Basic security check: Only allow POST requests
    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405,
            body: JSON.stringify({ error: 'Method Not Allowed. Only POST requests are permitted.' }),
        };
    }

    // 2. Parse the incoming request body from the frontend
    let body;
    try {
        body = JSON.parse(event.body);
    } catch (e) {
        return {
            statusCode: 400,
            body: JSON.stringify({ error: 'Invalid JSON body provided.' }),
        };
    }

    const { userQuery, systemInstruction } = body;

    // 3. Ensure we have the secret API key before making the external call
    if (!API_KEY) {
        return {
            statusCode: 500,
            body: JSON.stringify({ error: 'Server configuration error: GEMINI_API_KEY is not set.' }),
        };
    }

    // 4. Construct the payload for the Google API
    const geminiPayload = {
        contents: [{ parts: [{ text: userQuery }] }],
        systemInstruction: { parts: [{ text: systemInstruction }] },
    };

    // 5. Make the secure call to the Gemini API
    try {
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(geminiPayload),
        });

        const result = await response.json();

        if (response.ok) {
            // Extract the text and send it back to the client
            const text = result.candidates?.[0]?.content?.parts?.[0]?.text || "Error: No text generated by AI model.";
            return {
                statusCode: 200,
                body: JSON.stringify({ text: text }),
            };
        } else {
            // Forward API errors back to the client
            console.error("Gemini API Error:", result);
            return {
                statusCode: response.status,
                body: JSON.stringify({ error: `Gemini API responded with status ${response.status}.` }),
            };
        }
    } catch (error) {
        console.error("Fetch Error:", error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: 'Failed to communicate with the Gemini API.' }),
        };
    }
};
